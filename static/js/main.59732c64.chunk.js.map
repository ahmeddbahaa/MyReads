{"version":3,"sources":["BooksAPI.js","components/ShelfUpdate.js","components/Book.js","components/Results.js","components/Search.js","components/Shelf.js","components/Home.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","ShelfUpdate","props","className","value","book","shelf","onChange","event","effect","target","updateShelf","disabled","Book","style","width","height","backgroundImage","imageLinks","thumbnail","title","authors","Results","NewBook","length","map","id","Search","useState","query","setquery","ReturnBook","setReturnBook","Return","books","to","type","placeholder","maxResults","fetch","method","body","JSON","stringify","then","res","json","data","search","Shelf","filter","Home","App","setbook","flag","setFlag","getBooks","a","includes","concat","update","useEffect","path","element","exat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59732c64.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import React from 'react'\nimport propTypes from 'prop-types'\n\nconst ShelfUpdate = (props) => {\n\n    const handleChange = (event) => {\n        const effect = event.target.value\n        props.updateShelf(props.book, effect)\n    }\n    return (\n        <div className=\"book-shelf-changer\">\n            <select value={props.book.shelf ? props.book.shelf : 'null'}\n                onChange={handleChange}\n            >\n                <option value=\"none\" disabled>\n                    Move to...\n                </option>\n                <option value=\"currentlyReading\">Currently Reading</option>\n                <option value=\"wantToRead\">Want to Read</option>\n                <option value=\"read\">Read</option>\n                <option value=\"null\">None</option>\n            </select>\n        </div>\n    )\n}\nShelfUpdate.propTypes = {\n    book: propTypes.object.isRequired,\n    updateShelf: propTypes.func.isRequired\n}\nexport default ShelfUpdate","import React from 'react'\nimport ShelfUpdate from './ShelfUpdate'\nimport propTypes from 'prop-types'\n\nconst Book = (props) => {\n    const {book} =props;\n    return (\n        <div className=\"book\">\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    <div\n                        className=\"book-cover\"\n                        style={{\n                            width: 128,\n                            height: 193,\n                            backgroundImage: `url(${book.imageLinks ? book.imageLinks.thumbnail : 'Cover Error'})`\n                        }}\n                    ></div>\n                    <ShelfUpdate book={book} updateShelf={props.updateShelf} />\n                </div>\n                <div className=\"book-title\">{book.title ? book.title : ''}</div>\n                <div className=\"book-authors\">{book.authors ? book.authors : ''}</div>\n            </div>\n        </div>\n    )\n}\nBook.propTypes = {\n    book: propTypes.object.isRequired,\n    updateShelf: propTypes.func.isRequired\n}\nexport default Book","import React from 'react'\nimport Book from './Book'\nimport propTypes from \"prop-types\";\n\nconst Results = (props) => {\n    return (\n        <div className=\"search-books-results\">\n            <ol className=\"books-grid\">\n                {props.NewBook && props.NewBook.length > 0 && props.NewBook.map((book) =>\n                    <li key={book.id}>\n                        <Book book={book} updateShelf={props.updateShelf} />\n                    </li>\n                )}\n            </ol>\n        </div>\n    )\n}\nResults.propTypes = {\n    updateShelf: propTypes.func.isRequired\n  }\nexport default Results","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport propTypes from 'prop-types'\nimport { search } from '../BooksAPI'\nimport Results from './Results'\n\nconst Search = (props) => {\n\n    const [query, setquery] = useState('')\n    const [ReturnBook, setReturnBook] = useState([])\n\n    const getQuery = (event) => {\n        const query = event.target.value\n        setquery(query)\n        search(query).then((Return) => {\n            setReturnBook(Return)\n        })\n    }\n\n    const NewBook = ReturnBook && ReturnBook.length > 0\n        && ReturnBook.map((Return) => {\n            props.books.map((book) => {\n                if (book.id === Return.id) {\n                    Return.shelf = book.shelf\n                }\n                return book\n            })\n            return Return\n        })\n    return (\n        <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n                <Link className=\"close-search\" to='/'>\n                    Close\n                </Link>\n                <div className=\"search-books-input-wrapper\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search by title, author, or ISBN\"\n                        value={query}\n                        onChange={getQuery}\n                    />\n                </div>\n            </div>\n            <Results NewBook={NewBook} updateShelf={props.updateShelf} />\n        </div>\n    )\n}\nSearch.propTypes = {\n    books: propTypes.array.isRequired,\n    updateShelf: propTypes.func.isRequired\n}\nexport default Search","import React from 'react'\nimport Book from './Book'\nimport propTypes from 'prop-types'\n\nconst Shelf= (props)=> {\n    const shelf = props.books.filter((Book)=> Book.shelf === props.type)\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{props.title}</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                   {shelf.map((book)=>\n                   <li key={book.id}>\n                        <Book book={book} updateShelf={props.updateShelf}/>\n                    </li>\n                   )}\n                </ol>\n            </div>\n        </div>\n    )\n}\nShelf.propTypes = {\n    books: propTypes.array.isRequired,\n    title: propTypes.string.isRequired,\n    type: propTypes.string.isRequired,\n    updateShelf: propTypes.func.isRequired\n}\nexport default Shelf","import React from 'react'\nimport propTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport Shelf from './Shelf'\n\nconst Home = (props) => {\n  const ShelfType = [\n    { title: 'Currently Reading', type: 'currentlyReading' },\n    { title: 'Want to Read', type: 'wantToRead' },\n    { title: 'Read', type: 'read' }\n  ]\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n      {ShelfType.map((shelf) =>\n        <div className=\"list-books-content\" key={shelf.type}>\n          <Shelf books={props.books} title={shelf.title} type={shelf.type} updateShelf={props.updateShelf} />\n        </div>\n      )}\n      <div className=\"open-search\">\n        <Link to='/search'>Add a book</Link>\n      </div>\n    </div>\n  )\n}\nHome.propTypes = {\n  books: propTypes.array.isRequired,\n  updateShelf: propTypes.func.isRequired\n}\nexport default Home","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\nimport { Route, Routes } from \"react-router-dom\"\nimport {getAll, update} from './BooksAPI'\n\nfunction App() {\n  const [books, setbook] = useState([]);\n  const [flag, setFlag] = useState(false);\n\n  const getBooks = async () => {\n    const res = await getAll()\n    setbook(res)\n  };\n  const updateShelf = (book, shelf) => {\n\n    if (books.includes(book)) {\n      book.shelf = shelf\n    } \n    else {\n      books.concat(book)\n      book.shelf = shelf\n    }\n    update(book, shelf)\n\n    setbook(books)\n    setFlag(!flag);\n    getBooks()\n  }\n\n  useEffect(() => {\n    getBooks()\n  },\n    [])\n\n  return (\n    <div className=\"app\">\n      <Routes>\n\n        <Route \n          path='/' \n            element={<Home books={books} updateShelf={updateShelf} />} />\n\n        <Route \n          exat \n            path='/search' \n              element={<Search books={books} updateShelf={updateShelf}  />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}